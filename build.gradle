buildscript {
	ext {
		springBootVersion = '1.4.1.RELEASE'
	}
	repositories {
		mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.9.0"
	}
}

plugins {
    id "net.vivin.gradle-semantic-build-versioning" version "2.0.2"
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: "com.palantir.docker"

docker {
    name "nektodev/attt"
    tags 'latest'
    dockerfile 'docker/Dockerfile'
    dependsOn tasks.jar, tasks.bootRepackage
    pull true
}


jar {
	baseName = 'attt'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
    mavenLocal()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-web')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	// https://mvnrepository.com/artifact/org.jsoup/jsoup
	compile group: 'org.jsoup', name: 'jsoup', version: '1.9.2'
//	compile group: 'nl.stil4m', name: 'transmission-rpc-java', version: '0.6.0-SNAPSHOT'
    compile files('./libs/transmission-rpc-java-0.6.0-SNAPSHOT')
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
    compile group: 'ru.nektodev.notification_service', name: 'client', version: '0.1.1-SNAPSHOT'
}

project.version.with {
    tagPrefix="v"
}

task releaseMajor(dependsOn: ['clean', 'bumpMajor', 'release', 'docker']) << {
    println "Release ${project.name} version: ${project.version}"
}

task releaseMinor(dependsOn: ['clean', 'bumpMinor', 'release', 'docker']) << {
    println "Release ${project.name} version: ${project.version}"
}

task releasePatch(dependsOn: ['clean', 'bumpPatch', 'release', 'docker']) << {
    println "Release ${project.name} version: ${project.version}"
}

task dockerTagAndPush << {
    dockerTag.execute()

    exec {
        commandLine "docker", "tag", "${docker.name}:latest", "${docker.name}:v${project.version}"
    }

    dockerPush.execute()
}

releasePatch.doLast {
    dockerTagAndPush.execute()
    tag.execute()
}

releaseMinor.doLast {
    dockerTagAndPush.execute()
    tag.execute()
}

releaseMajor.doLast {
    dockerTagAndPush.execute()
    tag.execute()
}
